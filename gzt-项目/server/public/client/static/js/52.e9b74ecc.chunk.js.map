{"version":3,"sources":["pages/work/approval/management/Group.tsx"],"names":["Content","Header","Group","connect","state","Object","_Users_litong_laravel_gzt_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_19__","listLoading","loading","effects","concat","dispatch","showTemSortList","params","type","payload","sortLoading","saveSortInfo","_this","setState","sortlist","document","body","querySelectorAll","sortJson","index","length","dataset","_Users_litong_laravel_gzt_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_13__","_Users_litong_laravel_gzt_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_10___default","a","mark","_callee","result","wrap","_context","prev","next","req","method","sort_json","sent","status","antd_es_message__WEBPACK_IMPORTED_MODULE_12__","success","props","history","push","info","stop","dragulaDecorator","componentBackingInstance","Dragula","this","company_id","_this$props","temSortList","react__WEBPACK_IMPORTED_MODULE_22__","antd_es_layout__WEBPACK_IMPORTED_MODULE_21__","className","antd_es_row__WEBPACK_IMPORTED_MODULE_5__","antd_es_col__WEBPACK_IMPORTED_MODULE_9__","span","antd_es_button__WEBPACK_IMPORTED_MODULE_7__","onClick","style","marginRight","antd_es_spin__WEBPACK_IMPORTED_MODULE_1__","spinning","delay","ref","map","item","type_id","name","all_count","key","data-type","antd_es_icon__WEBPACK_IMPORTED_MODULE_3__","paddingRight","React"],"mappings":"8XAQQA,cAASC,aA4BIC,EADpBC,YAlBuB,SAACC,GACvB,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFD,EAAK,SADV,CAEEG,YAAaH,EAAMI,QAAQC,QAAd,GAAAC,OAJC,WAID,yBAIU,SAACC,GAC1B,MAAO,CACLC,gBAAiB,SAACC,GAChBF,EAAS,CACPG,KAAI,GAAAJ,OAZM,WAYN,qBACJK,QAASF,qNAQfT,MAAQ,CAINY,aAAa,KAOfC,aAAe,WACbC,EAAKC,SAAS,CACZH,aAAa,IAIf,IAFA,IAAMI,EAAWC,SAASC,KAAKC,iBAAiB,2BAC1CC,EAAW,GACRC,EAAQ,EAAGA,EAAQL,EAASM,OAAQD,IAC3CD,EAAUJ,EAASK,GAAeE,QAAQb,MAAQW,EAEpDpB,OAAAuB,EAAA,EAAAvB,CAAAwB,EAAAC,EAAAC,KAAC,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACsBC,YAAI,qCAAsC,CAC7DC,OAAQ,OACRjB,KAAM,CACJkB,UAAWhB,KAJhB,OACOS,EADPE,EAAAM,KAOCvB,EAAKC,SAAS,CACZH,aAAa,IAEO,YAAlBiB,EAAOS,QACTC,EAAA,EAAQC,QAAQ,4BAChB1B,EAAK2B,MAAMC,QAAQC,KAAK,8BAExBJ,EAAA,EAAQK,KAAK,uEAdhB,wBAAAb,EAAAc,SAAAjB,KAAD3B,MAqBF6C,iBAAmB,SAACC,GACdA,GAEFC,IAAQ,CAACD,wFArCXE,KAAKR,MAAMjC,gBAAgB,CACzB0C,WAAY,uCAuCP,IAAAC,EACuCF,KAAKR,MAA3CW,EADDD,EACCC,YAAaV,EADdS,EACcT,QAASvC,EADvBgD,EACuBhD,YACtBS,EAAgBqC,KAAKjD,MAArBY,YAER,OACEyC,EAAA,cAAAC,EAAA,GAAQC,UAAU,oBAChBF,EAAA,cAACxD,EAAD,CAAQ0D,UAAU,SAChBF,EAAA,cAAAG,EAAA,GAAKD,UAAU,gBACbF,EAAA,cAAAI,EAAA,GAAKC,KAAM,GAAX,oDAGAL,EAAA,cAAAI,EAAA,GAAKC,KAAM,GAAIH,UAAU,cACvBF,EAAA,cAAAM,EAAA,GAAQJ,UAAU,WAAWK,QAAS,WAAQlB,EAAQC,KAAK,+BAA3D,4BACAU,EAAA,cAAAM,EAAA,GAAQvD,QAASQ,EAAaF,KAAK,UAAUkD,QAASX,KAAKpC,aAAcgD,MAAO,CAAEC,YAAa,SAA/F,+BAINT,EAAA,cAACzD,EAAD,KACEyD,EAAA,cAAAU,EAAA,GAAMC,SAAU7D,EAAa8D,MAAO,KAClCZ,EAAA,qBAAKa,IAAKjB,KAAKH,iBAAkBS,UAAU,eAEvCH,GAAeA,EAAYe,IAAI,SAACC,EAAW/C,GAAe,IAChDgD,EAA6BD,EAA7BC,QAASC,EAAoBF,EAApBE,KAAMC,EAAcH,EAAdG,UACvB,OACElB,EAAA,cAAAG,EAAA,GAAKD,UAAU,2BAA2BiB,IAAKnD,EAAOoD,YAAWJ,GAC/DhB,EAAA,cAAAI,EAAA,GAAKC,KAAM,GACTL,EAAA,cAAAqB,EAAA,GAAMhE,KAAK,eAAemD,MAAO,CAAEc,aAAc,QAAUpB,UAAU,kBADvE,iCAEQe,GAERjB,EAAA,cAAAI,EAAA,GAAKC,KAAM,GAAX,iCACQa,iBA9EKK","file":"static/js/52.e9b74ecc.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Layout, Row, Col, Button, Icon, message, Spin } from 'antd';\nimport Dragula from 'react-dragula';\nimport { History } from 'history';\nimport './index.scss';\nimport { connect } from 'dva';\nimport req from '../../../../utils/request';\n\nconst { Content, Header } = Layout;\ninterface GroupProps {\n  showTemSortList: any,\n  temSortList: any,\n  history: History,\n  saveSortInfo: any,\n  listLoading: boolean\n}\nconst NAMESPACE = 'Approval'; // dva model 命名空间\nconst mapStateToProps = (state: any) => {\n  return {\n    ...state[NAMESPACE],\n    listLoading: state.loading.effects[`${NAMESPACE}/queryTemSortList`],\n  }\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    showTemSortList: (params: any) => {\n      dispatch({\n        type: `${NAMESPACE}/queryTemSortList`,\n        payload: params\n      });\n    },\n  }\n}\n\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class Group extends React.Component<GroupProps, any> {\n  state = {\n    /**\n     * 保存排序loading\n     */\n    sortLoading: false\n  }\n  componentDidMount() {\n    this.props.showTemSortList({\n      company_id: '1'\n    })\n  }\n  saveSortInfo = () => {\n    this.setState({\n      sortLoading: true\n    })\n    const sortlist = document.body.querySelectorAll('.temSortList .sort-list');\n    const sortJson = {}\n    for (let index = 0; index < sortlist.length; index++) {\n      sortJson[(sortlist[index] as any).dataset.type] = index;\n    }\n    (async () => {\n      const result = await req('/api/c_approval_type_sequence_save', {\n        method: 'POST',\n        body: {\n          sort_json: sortJson\n        }\n      })\n      this.setState({\n        sortLoading: false\n      })\n      if (result.status === 'success') {\n        message.success('提交成功');\n        this.props.history.push('/work/approval/management');\n      } else {\n        message.info('服务器繁忙，请稍后再试~')\n      }\n    })()\n  }\n  /**\n   * 激活拖拽插件\n   */\n  dragulaDecorator = (componentBackingInstance: any) => {\n    if (componentBackingInstance) {\n\n      Dragula([componentBackingInstance]);\n    }\n  };\n  render() {\n    const { temSortList, history, listLoading } = this.props;\n    const { sortLoading } = this.state;\n\n    return (\n      <Layout className=\"management white\">\n        <Header className=\"white\">\n          <Row className=\"sort-wrapper\">\n            <Col span={4}>\n              审批类型分组排序\n              </Col>\n            <Col span={20} className=\"text-right\">\n              <Button className=\"type-btn\" onClick={() => { history.push('/work/approval/management') }}>取消排序</Button>\n              <Button loading={sortLoading} type=\"primary\" onClick={this.saveSortInfo} style={{ marginRight: '20px' }} >保存排序</Button>\n            </Col>\n          </Row>\n        </Header>\n        <Content >\n          <Spin spinning={listLoading} delay={300}>\n            <div ref={this.dragulaDecorator} className=\"temSortList\">\n              {\n                temSortList && temSortList.map((item: any, index: any) => {\n                  const { type_id, name, all_count } = item;\n                  return (\n                    <Row className=\"sort-list cursor-pointer\" key={index} data-type={type_id}>\n                      <Col span={5}>\n                        <Icon type=\"ordered-list\" style={{ paddingRight: '15px' }} className='parmary-color' />\n                        类型名称：{name}\n                      </Col>\n                      <Col span={5}>\n                        审批数量：{all_count}\n                      </Col>\n                    </Row>\n                  )\n                })\n              }\n            </div>\n          </Spin>\n        </Content>\n      </Layout>\n    )\n  }\n}"],"sourceRoot":""}