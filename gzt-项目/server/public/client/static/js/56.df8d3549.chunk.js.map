{"version":3,"sources":["pages/work/review/templatemgt/GroupSort.tsx"],"names":["GroupSort","connect","state","templateGroup","dispatch","queryTemplateGroup","cb","type","concat","payload","queryTemplates","sortedProcessWrapperEl","React","createRef","loading","queryLoading","dragulaDecorator","sortedProcessWrapper","Dragula","_this","current","saveGroupSort","setState","sortJson","groupList","getElementsByClassName","i","length","dataset","Object","_Users_litong_laravel_gzt_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_15__","_Users_litong_laravel_gzt_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_12___default","a","mark","_callee","result","wrap","_context","prev","next","request","method","body","sort_json","sent","status","antd_es_message__WEBPACK_IMPORTED_MODULE_14__","success","props","history","push","error","stop","_this2","this","_this3","_this$state","react__WEBPACK_IMPORTED_MODULE_21___default","createElement","antd_es_layout__WEBPACK_IMPORTED_MODULE_1__","className","antd_es_row__WEBPACK_IMPORTED_MODULE_7__","antd_es_col__WEBPACK_IMPORTED_MODULE_11__","span","antd_es_button__WEBPACK_IMPORTED_MODULE_9__","onClick","replace","style","marginLeft","antd_es_spin__WEBPACK_IMPORTED_MODULE_3__","wrapperClassName","spinning","ref","map","item","index","id","name","count","key","data-type","antd_es_icon__WEBPACK_IMPORTED_MODULE_5__","padding","color","Component"],"mappings":"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","file":"static/js/56.df8d3549.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Layout, Button, Icon, message, Spin } from 'antd';\nimport Dragula from 'react-dragula';\nimport { connect } from 'dva';\nimport './groupSort.scss'\nimport request from '../../../../utils/request';\n\n\nexport interface GroupSortProps {\n  /**\n   * 数据\n   */\n  params: any;\n  history: any;\n  /** 获取模板分组列表信息 */\n  queryTemplateGroup: Function;\n  queryTemplates: Function;\n  /** 模板分组列表 */\n  templateGroup: any[];\n}\n\nconst NAMESPACE = 'Review';\nconst mapStateToProps = (state: any) => {\n  return {\n    templateGroup: state[NAMESPACE].templateGroup\n  }\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    queryTemplateGroup: (cb: Function) => {\n      dispatch({\n        type: `${NAMESPACE}/queryTemplateGroup`,\n        payload: cb\n      });\n    },\n    /** 获取模板列表信息 (用于刷新) */\n    queryTemplates: () => {\n      dispatch({\n        type: `${NAMESPACE}/queryTemplates`\n      });\n    }\n  }\n}\n@connect(mapStateToProps, mapDispatchToProps)\n/**\n * 分组下具体流程item\n */\nexport default class GroupSort extends React.Component<GroupSortProps, any>{\n\n  sortedProcessWrapperEl: any = React.createRef();\n  state = {\n    loading: false,\n    queryLoading: false\n  }\n\n  componentDidMount() {\n    /** 首次请求 之后用缓存的数据 */\n    if (!this.props.templateGroup) {\n      /** 请求数据时loading */\n      this.setState({\n        queryLoading: true\n      })\n      this.props.queryTemplateGroup(() => {\n        this.setState({\n          queryLoading: false\n        })\n      });\n    }\n\n  }\n\n  /**\n   * 注册拖拽事件\n   * @param sortedProcessWrapper 原生DOM\n   */\n  dragulaDecorator = (sortedProcessWrapper: any) => {\n    if (sortedProcessWrapper) {\n      Dragula([sortedProcessWrapper]);\n      this.sortedProcessWrapperEl.current = sortedProcessWrapper;\n    }\n  }\n  /**\n   * 保存拖拽后的顺序\n   */\n  saveGroupSort = () => {\n    this.setState({\n      loading: true\n    });\n    const sortJson = {};\n    const groupList = (this.sortedProcessWrapperEl.current as any).getElementsByClassName('group-item');\n    for (let i = 0; i < groupList.length; i++) {\n      sortJson[groupList[i].dataset.type] = i;\n    }\n    (async () => {\n      const result = await request('/api/c_pst_sort_pst_template_type', {\n        method: 'POST',\n        body: {\n          sort_json: sortJson\n        }\n      });\n      this.setState({\n        loading: false\n      });\n      if (result.status === 'success') {\n        message.success('保存成功');\n        this.props.history.push('/work/review/templatemgt');\n        this.props.queryTemplates();\n        this.props.queryTemplateGroup();\n      } else {\n        message.error('服务器错误，请稍后再试');\n      }\n    })()\n  }\n\n  render() {\n    const { templateGroup } = this.props;\n    const { loading, queryLoading } = this.state;\n\n    return (\n      <Layout className=\"review-group-sort\" >\n        <Row className=\"group-sort-header\">\n          <Col span={4}>\n            <span className=\"group-sort-title\">评审流程分组排序</span>\n          </Col>\n          <Col span={20} className=\"text-right\">\n            <Button onClick={() => this.props.history.replace('/work/review/templatemgt')}>取消</Button>\n            <Button loading={loading} type=\"primary\" style={{ marginLeft: '30px' }} onClick={this.saveGroupSort}>保存排序</Button>\n          </Col>\n        </Row>\n        <Spin wrapperClassName=\"spin-scroll-wrapper\" spinning={queryLoading}>\n          <div ref={this.dragulaDecorator} className=\"group-sort-list\">\n            {\n              templateGroup && templateGroup.map((item: any, index: any) => {\n                const { id, name, count } = item;\n                return (\n                  <Row className=\"group-item\" key={index} data-type={id}>\n                    <Icon type=\"ordered-list\" style={{ padding: '0 10px' }} />\n                    <span>{name}</span>\n                    <span style={{ color: '#888' }}>（{count}）</span>\n                  </Row>\n                )\n              })\n            }\n\n          </div>\n        </Spin>\n      </Layout>\n    )\n  }\n}"],"sourceRoot":""}